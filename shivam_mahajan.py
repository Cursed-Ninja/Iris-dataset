# -*- coding: utf-8 -*-
"""Shivam_Mahajan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUcF28l6z9sutEJXqkIY6Hhv9DKXG2LS

Machine learning project for predicting the type of flower when the sepal and petal length is entered by user.

Importing numpy and panda
"""

import numpy as np
import pandas as pd

"""Importing iris data from scikit-learn framework/dataset"""

from sklearn.datasets import load_iris
iris_dataset = load_iris()

"""Output of the name of iris dataset keys"""

print("Keys of iris_dataset: \n{}".format(iris_dataset.keys()))

"""Output of the description key of iris dataset which describes the characterstics of dataset"""

print(iris_dataset['DESCR'][:200]+"\n...")

"""Output of target name key of iris dataset which contains the species of flower"""

print("Target names : {}".format(iris_dataset['target_names']))

"""Output of feature name key of iris dataset which describes each of the feature for a particular categorization like sepal length, etc."""

print("Feature names: \n{}".format(iris_dataset['feature_names']))

"""Output of the type of data."""

print("Types of data: {}".format(type(iris_dataset['data'])))

"""Output of shape of the ndarray of the the data."""

print("Shape of data: {}".format(iris_dataset['data'].shape))

"""Output of just first five rows of the data in iris dataset"""

print("First five rows of data:\n{}".format(iris_dataset['data'][:5]))

"""Output of the type of target key."""

print("Type of target : {}".format(type(iris_dataset['target'])))

"""Output of the shape of the target key"""

print("Shape of target: {}".format(iris_dataset['target'].shape))

"""Output of all the kind of flower stored in the target key. Here 0 = sentosa, 1 = versicolor & 2 = virginica"""

print("Target\n{}".format(iris_dataset['target']))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
iris_dataset['data'], iris_dataset['target'], random_state=0)

"""Ouptput of the shape of train and test data."""

print("X_train shape: {}".format(X_train.shape))
print("y_train shape: {}".format(y_train.shape))
print("X_test shape: {}".format(X_test.shape))
print("y_test shape: {}".format(y_test.shape))

"""Forming the K-nearest neighbor learning model"""

from sklearn.neighbors import KNeighborsClassifier 
knn = KNeighborsClassifier(n_neighbors=1)

"""Training the bot"""

knn.fit(X_train, y_train)

"""Making a prediction"""

X_new = np.array([[5, 2.9, 1, 0.2]])
print("X_new.shape: {}".format(X_new.shape))

prediction = knn.predict(X_new)
print("Prediction: {}".format(prediction))
print("Predicted target name: {}".format(
    iris_dataset['target_names'][prediction]
))

"""Testing the bot"""

y_pred = knn.predict(X_test)
print("Test set predictions:\n{}".format(y_pred))

"""Computing the test score"""

#comparing actual values to predicted values
print("Test set score: {}".format(np.mean(y_pred == y_test)))